1-  Escreva um programa em C que cria um processo utilizando a chamada de sistema fork(). 
    Ambos os processos pai e filho deverão imprimir na tela a frase "Novo processo criado!". 
    Você deverá utilizar apenas um printf().
 
 #include <stdio.h>
 #include <unistd.h>


int main() {
    pid_t pid = fork();  // cria um novo processo


    if (pid < 0) {  // verifica se ocorreu um erro ao criar o processo
        printf("Erro ao criar processo!");
    } else if (pid == 0) {  // verifica se o processo é o filho
        printf("Novo processo criado!\n");
    } else {  // caso contrário, é o pai
        printf("Novo processo criado!\n");
    }


    return 0;
}

O programa cria um novo processo com a chamada de sistema fork() e armazena o valor de retorno na variável pid. 
Em seguida, verifica-se se ocorreu algum erro na criação do processo. Caso contrário, se o valor de pid for igual a 0, 
é o processo filho e imprime a frase "Novo processo criado!" na tela. Caso contrário, é o processo pai e também imprime a 
mesma frase na tela. Note que foi utilizado um caractere de quebra de linha (\n) no final da string para que a mensagem 
seja exibida em linhas separadas.



2-  Escreva um programa em C no qual o processo pai cria 4 processos filhos. Para cada filho criado, 
    o processo pai deverá imprimir na tela "Processo pai XX criou YY", onde XX é o PID do pai e YY o PID do filho. 
    Além disso, os processos filhos deverão imprimir na tela "Processo filho XX", onde XX é o PID do filho. 
    Dica: utilize a função getpid() para retornar o PID do processo corrente.


#include <stdio.h>
#include <unistd.h>


int main() {
    pid_t pid;
    int i;


    for (i = 1; i <= 4; i++) {  // cria 4 processos filhos
        pid = fork();
        if (pid == 0) {  // se for o processo filho
            printf("Processo filho %d\n", getpid());
            return 0;
        } else if (pid < 0) {  // se ocorrer um erro
            printf("Erro ao criar processo filho!\n");
            return 1;
        } else {  // se for o processo pai
            printf("Processo pai %d criou %d\n", getpid(), pid);
        }
    }


    return 0;
}

O programa utiliza um loop para criar 4 processos filhos, e para cada um deles verifica se o processo atual é o pai ou 
o filho utilizando o valor de retorno da chamada de sistema fork(). Se for o processo filho, imprime a mensagem 
"Processo filho XX", onde XX é o PID do filho, utilizando a função getpid(). Se for o processo pai, imprime a mensagem 
"Processo pai XX criou YY", onde XX é o PID do pai e YY é o PID do filho. Note que, no caso dos processos filhos, é utilizado 
o comando return 0; para encerrar o processo após a impressão da mensagem.



3-  Escreva um programa em C no qual o processo pai cria 2 processos filhos e cada um dos processos 
    filhos cria mais 2 processos filhos. Os processos filhos deverão imprimir na tela "Processo XX filho de YY", 
    onde XX é o PID do processo e YY é o PID do pai do processo. 
    Dica: utilize a função getpid() para retornar o PID do processo corrente e getppid() para retornar o PID do pai do processo corrente.


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid1, pid2, pid3, pid4;

    pid1 = fork();

    if (pid1 == 0) {
        // primeiro filho
        pid3 = fork();
        if (pid3 == 0) {
            // neto 1
            printf("Processo %d filho de %d\n", getpid(), getppid());
        } else {
            // neto 2
            pid4 = fork();
            if (pid4 == 0) {
                printf("Processo %d filho de %d\n", getpid(), getppid());
            } else {
                // filho 1
                printf("Processo %d filho de %d\n", getpid(), getppid());
            }
        }
    } else {
        pid2 = fork();
        if (pid2 == 0) {
            // segundo filho
            pid3 = fork();
            if (pid3 == 0) {
                // neto 1
                printf("Processo %d filho de %d\n", getpid(), getppid());
            } else {
                // neto 2
                pid4 = fork();
                if (pid4 == 0) {
                    printf("Processo %d filho de %d\n", getpid(), getppid());
                } else {
                    // filho 2
                    printf("Processo %d filho de %d\n", getpid(), getppid());
                }
            }
        } else {
            // pai
            printf("Processo pai %d\n", getpid());
        }
    }

    return 0;
}

Aqui, o processo pai cria dois processos filhos (pid1 e pid2) utilizando a função fork(). 
Cada um dos processos filhos então cria dois processos filhos adicionais (pid3 e pid4), novamente usando a função fork().
O programa então usa a função getpid() para obter o PID do processo corrente e getppid() para obter o PID do pai do 
processo corrente e imprimir a mensagem correspondente na tela. A saída do programa será semelhante a esta:


