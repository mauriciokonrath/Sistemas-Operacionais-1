1-  Escreva um programa em C que cria um processo utilizando a chamada de sistema fork(). 
    Ambos os processos pai e filho deverão imprimir na tela a frase "Novo processo criado!". 
    Você deverá utilizar apenas um printf().
 
 #include <stdio.h>
 #include <unistd.h>


int main() {
    pid_t pid = fork();  // cria um novo processo


    if (pid < 0) {  // verifica se ocorreu um erro ao criar o processo
        printf("Erro ao criar processo!");
    } else if (pid == 0) {  // verifica se o processo é o filho
        printf("Novo processo criado!\n");
    } else {  // caso contrário, é o pai
        printf("Novo processo criado!\n");
    }


    return 0;
}

O programa cria um novo processo com a chamada de sistema fork() e armazena o valor de retorno na variável pid. 
Em seguida, verifica-se se ocorreu algum erro na criação do processo. Caso contrário, se o valor de pid for igual a 0, 
é o processo filho e imprime a frase "Novo processo criado!" na tela. Caso contrário, é o processo pai e também imprime a 
mesma frase na tela. Note que foi utilizado um caractere de quebra de linha (\n) no final da string para que a mensagem 
seja exibida em linhas separadas.



2-  Escreva um programa em C no qual o processo pai cria 4 processos filhos. Para cada filho criado, 
    o processo pai deverá imprimir na tela "Processo pai XX criou YY", onde XX é o PID do pai e YY o PID do filho. 
    Além disso, os processos filhos deverão imprimir na tela "Processo filho XX", onde XX é o PID do filho. 
    Dica: utilize a função getpid() para retornar o PID do processo corrente.


#include <stdio.h>
#include <unistd.h>


int main() {
    pid_t pid;
    int i;


    for (i = 1; i <= 4; i++) {  // cria 4 processos filhos
        pid = fork();
        if (pid == 0) {  // se for o processo filho
            printf("Processo filho %d\n", getpid());
            return 0;
        } else if (pid < 0) {  // se ocorrer um erro
            printf("Erro ao criar processo filho!\n");
            return 1;
        } else {  // se for o processo pai
            printf("Processo pai %d criou %d\n", getpid(), pid);
        }
    }


    return 0;
}

O programa utiliza um loop para criar 4 processos filhos, e para cada um deles verifica se o processo atual é o pai ou 
o filho utilizando o valor de retorno da chamada de sistema fork(). Se for o processo filho, imprime a mensagem 
"Processo filho XX", onde XX é o PID do filho, utilizando a função getpid(). Se for o processo pai, imprime a mensagem 
"Processo pai XX criou YY", onde XX é o PID do pai e YY é o PID do filho. Note que, no caso dos processos filhos, é utilizado 
o comando return 0; para encerrar o processo após a impressão da mensagem.



3-  Escreva um programa em C no qual o processo pai cria 2 processos filhos e cada um dos processos 
    filhos cria mais 2 processos filhos. Os processos filhos deverão imprimir na tela "Processo XX filho de YY", 
    onde XX é o PID do processo e YY é o PID do pai do processo. 
    Dica: utilize a função getpid() para retornar o PID do processo corrente e getppid() para retornar o PID do pai do processo corrente.


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid1, pid2, pid3, pid4;

    pid1 = fork();

    if (pid1 == 0) {
        // primeiro filho
        pid3 = fork();
        if (pid3 == 0) {
            // neto 1
            printf("Processo %d filho de %d\n", getpid(), getppid());
        } else {
            // neto 2
            pid4 = fork();
            if (pid4 == 0) {
                printf("Processo %d filho de %d\n", getpid(), getppid());
            } else {
                // filho 1
                printf("Processo %d filho de %d\n", getpid(), getppid());
            }
        }
    } else {
        pid2 = fork();
        if (pid2 == 0) {
            // segundo filho
            pid3 = fork();
            if (pid3 == 0) {
                // neto 1
                printf("Processo %d filho de %d\n", getpid(), getppid());
            } else {
                // neto 2
                pid4 = fork();
                if (pid4 == 0) {
                    printf("Processo %d filho de %d\n", getpid(), getppid());
                } else {
                    // filho 2
                    printf("Processo %d filho de %d\n", getpid(), getppid());
                }
            }
        } else {
            // pai
            printf("Processo pai %d\n", getpid());
        }
    }

    return 0;
}

Aqui, o processo pai cria dois processos filhos (pid1 e pid2) utilizando a função fork(). 
Cada um dos processos filhos então cria dois processos filhos adicionais (pid3 e pid4), novamente usando a função fork().
O programa então usa a função getpid() para obter o PID do processo corrente e getppid() para obter o PID do pai do 
processo corrente e imprimir a mensagem correspondente na tela. A saída do programa será semelhante a esta:


4-  Escreva um programa em C que recebe via linha de comando a quantidade de processos a serem criados (procs). 
    O processo principal (processo pai) cria procs processos filhos com uso da chamada de sistema fork(). 
    Cada processo filho deverá ficar bloqueado durante um tempo aleatório entre 1s e 10s e deverá imprimir 
    "Processo XX criado", onde XX é o PID do processo. Utilize as chamadas de sistema sleep() e getpid() para resolver esse exercício.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <time.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Uso: %s <quantidade de processos a serem criados>\n", argv[0]);
        return 1;
    }

    int procs = atoi(argv[1]);
    pid_t pid;

    srand(time(NULL));

    for (int i = 0; i < procs; i++) {
        pid = fork();

        if (pid < 0) {
            printf("Erro na criação do processo filho.\n");
            return 1;
        } else if (pid == 0) {
            int sleep_time = rand() % 10 + 1;
            sleep(sleep_time);
            printf("Processo %d criado.\n", getpid());
            exit(0);
        }
    }

    for (int i = 0; i < procs; i++) {
        wait(NULL);
    }

    printf("Todos os processos filhos terminaram.\n");

    return 0;
}

Primeiramente, o programa verifica se o número correto de argumentos foi passado via linha de comando. 
Caso contrário, é exibida uma mensagem de uso e o programa é encerrado com status de erro.
Em seguida, a quantidade de processos a serem criados é convertida para inteiro a partir da string recebida via linha de comando. 
É criada uma semente para geração de números aleatórios baseada no tempo atual, utilizando a função time(NULL).
O laço for é utilizado para criar procs processos filhos. Na primeira iteração do laço, é chamada a função fork() que cria um processo filho. 
O valor retornado pela função fork() é armazenado na variável pid. Caso o valor de pid seja menor que zero, 
houve um erro na criação do processo filho e o programa é encerrado com status de erro. 
Caso o valor de pid seja igual a zero, estamos no processo filho. É gerado um tempo aleatório entre 1s e 10s utilizando a função rand() 
e sleep() é chamada para bloquear o processo filho pelo tempo gerado. Em seguida, é exibida uma mensagem informando o PID do processo filho 
e a função exit() é chamada para encerrar a execução do processo filho com status de sucesso.
No processo pai, o laço for é utilizado para aguardar a finalização de todos os processos filhos criados utilizando a função wait().
Quando todos os processos filhos terminarem, é exibida uma mensagem informando que todos os processos filhos terminaram e o programa é 
encerrado com status de sucesso.










1-  Qual a função de um escalonador?
O escalonador é responsável por gerenciar o acesso aos recursos do sistema e decidir qual processo ou thread será executado pelo processador 
em um determinado momento. Sua principal função é alocar o tempo de processamento da CPU de forma justa e eficiente entre os processos e threads 
que competem pelos recursos do sistema. Além disso, o escalonador também é responsável por gerenciar as prioridades dos processos e threads, 
permitindo que processos críticos ou de maior importância recebam prioridade na alocação de recursos. Em resumo, o escalonador é um componente 
essencial do sistema operacional, que garante a execução correta e eficiente das tarefas do sistema e dos programas em execução.
Em quais momentos do ciclo de vida de um processo um escalonador pode ser necessário?
O escalonador é necessário em diferentes momentos do ciclo de vida de um processo, como:
Quando um processo é criado: o escalonador é responsável por selecionar qual processo recém-criado deve ser executado primeiro.
Quando um processo é bloqueado: se um processo está bloqueado, aguardando uma entrada/saída, o escalonador deve selecionar outro processo para 
executar no intervalo de tempo. Quando um processo é interrompido: se um processo está executando e é interrompido (por exemplo, 
para executar uma rotina de serviço do sistema), o escalonador precisa selecionar qual processo deve ser executado em seguida. 
Quando um processo termina: o escalonador precisa selecionar qual processo deve ser executado em seguida. Em resumo, o escalonador é necessário 
para decidir qual processo deve ser executado em determinado momento, levando em consideração diversos fatores, como prioridades, tempo de execução, 
entradas e saídas, entre outros.


2-  Explique a diferença entre um algoritmo de escalonamento preemptivo e não preemptivo.
Os algoritmos de escalonamento preemptivo e não preemptivo são diferentes em relação à capacidade do sistema operacional em interromper a execução de 
um processo em andamento para permitir a execução de outro processo. O escalonamento preemptivo permite que o sistema operacional interrompa a execução 
de um processo em andamento para permitir a execução de outro processo. Nesse caso, o processo em execução é "preemptado" (ou interrompido) antes de 
sua conclusão e colocado de volta na fila de processos prontos para execução. Isso ocorre devido a um evento como a chegada de um processo mais prioritário, 
o término de um E/S ou a expiração de um determinado tempo de execução. Por outro lado, os algoritmos de escalonamento não preemptivos não permitem a 
interrupção de um processo em andamento e, portanto, só são executados até a conclusão ou até a espera por um evento de E/S. Em outras palavras, 
o processo em execução é executado até o seu término antes que o próximo processo possa ser executado. Assim, em resumo, a principal diferença entre os 
dois tipos de algoritmos de escalonamento é a capacidade de interromper a execução de um processo em andamento para permitir a execução de outro processo 
mais prioritário.


3-  Explique, com auxílio de exemplos, as diferenças entre os algoritmos FCFS e SJF.
FCFS (First-Come, First-Served) e SJF (Shortest Job First) são dois algoritmos de escalonamento de processos em sistemas operacionais.
O algoritmo FCFS é um algoritmo de escalonamento não preemptivo, onde os processos são escalonados de acordo com a ordem de chegada, ou seja, 
o processo que chega primeiro é executado primeiro. A principal desvantagem desse algoritmo é que ele não leva em consideração o tempo de execução dos processos, 
o que pode levar a um tempo médio de espera longo, especialmente se um processo de longa duração chegar primeiro. á o algoritmo SJF é um algoritmo de escalonamento 
preemptivo ou não preemptivo, onde os processos são escalonados de acordo com o tempo de execução necessário. O processo mais curto é executado primeiro, 
independentemente da ordem de chegada. Este algoritmo é considerado ótimo em termos de tempo médio de espera, mas pode levar a situações de inanição (starvation) 
se houver processos longos que cheguem continuamente



4-  No algoritmo de escalonamento por alternância circular, quais são as vantagens e desvantagens de se utilizar um quantum grande e pequeno?
O algoritmo de escalonamento por alternância circular, também conhecido como Round Robin, utiliza um conceito de fatia de tempo (quantum) para garantir a 
execução justa dos processos. Quando um processo é selecionado para execução, ele é executado por um determinado tempo (quantum) antes de ser interrompido 
para dar espaço a outro processo. O processo interrompido é colocado de volta na fila de processos prontos para executar novamente em um futuro próximo.
A escolha do valor do quantum é uma questão de trade-off entre a eficiência e a justiça no escalonamento dos processos. Se o quantum for grande, a 
quantidade de tempo de CPU alocada para cada processo é maior, o que pode levar a um melhor desempenho do sistema em termos de throughput 
(quantidade de trabalho concluído em um determinado período de tempo). No entanto, se um processo tiver uma grande quantidade de trabalho para realizar, 
ele pode ocupar a CPU por um longo período de tempo antes de ser interrompido, o que pode levar a uma diminuição da responsividade do sistema. Por exemplo, 
se o quantum for 100ms e um processo demorar 95ms para concluir sua execução, ele terá que esperar outros 100ms antes de ter a oportunidade de executar 
novamente, mesmo que não haja outros processos prontos para executar. Por outro lado, se o quantum for pequeno, a quantidade de tempo de CPU alocada para 
cada processo é menor, o que pode levar a uma melhor responsividade do sistema, uma vez que um processo será interrompido mais frequentemente para dar 
oportunidade a outros processos. No entanto, o overhead de troca de contexto (interrupção de um processo e a escolha de outro processo para executar) pode 
tornar-se significativo se o quantum for muito pequeno, diminuindo a eficiência do sistema em termos de throughput. Portanto, a escolha do valor do quantum
depende das características do sistema e dos processos que serão executados. Um valor de quantum razoável é aquele que não compromete a responsividade do 
sistema e, ao mesmo tempo, mantém a eficiência do sistema em termos de throughput.


Explique como evitar o problema da postergação indefinida no algoritmo de prioridade com auxílio de um exemplo.
O problema da postergação indefinida ocorre quando processos com baixa prioridade nunca são executados, pois processos com maior 
prioridade sempre são escalonados antes. Para evitar esse problema, é possível utilizar o conceito de envelhecimento (aging), onde a 
cada unidade de tempo que um processo espera na fila de baixa prioridade, sua prioridade é aumentada. Dessa forma, com o passar do tempo, 
um processo que inicialmente possuía baixa prioridade pode ter sua prioridade elevada para que possa ser executado. Assim, os jobs com tempos de 
execução menores são executados primeiro, seguidos pelo job de tempo de execução X, que será executado por último. Essa ordem minimiza o tempo médio 
de retorno porque os jobs mais curtos serão executados rapidamente, liberando a CPU para a execução dos próximos jobs. Quando o job de tempo de 
execução X for executado, os demais jobs já terão terminado, permitindo que ele execute sem interrupções e sem causar grandes atrasos.




